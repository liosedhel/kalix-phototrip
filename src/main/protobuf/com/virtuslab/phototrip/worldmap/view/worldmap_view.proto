syntax = "proto3";

package com.virtuslab.phototrip.worldmap.view;

import "com/virtuslab/phototrip/worldmap/domain/worldmap_domain.proto";
import "kalix/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service WorldMapByUserId {
  option (kalix.codegen) = {
    view: {}
  };

  rpc UpdateWorldMap(domain.WorldMap) returns (domain.WorldMap) {
    option (kalix.method).eventing.in = {
      value_entity: "worldmap"
    };
    option (kalix.method).view.update = {
      table: "worldmaps"
    };
  }

  rpc GetWorldMaps(ByUserIdRequest) returns (stream domain.WorldMap) {
    option (kalix.method).view.query = {
      query: "SELECT * FROM worldmaps WHERE creator_id = :user_id"
    };
    option (google.api.http) = {
      get: "/worldmap/user/{user_id}"
    };
  }

  //Error reported from Kalix system: KLX-00101 More than one query per view isn't supported yet.
//  rpc GetAllWorldMaps(google.protobuf.Empty) returns (stream domain.WorldMap) {
//    option (kalix.method).view.query = {
//      query: "SELECT * FROM worldmaps"
//    };
//  }

}

service WorldMapAll {
  option (kalix.codegen) = {
    view: {}
  };

  rpc UpdateWorldMap(domain.WorldMap) returns (domain.WorldMap) {
    option (kalix.method).eventing.in = {
      value_entity: "worldmap"
    };
    option (kalix.method).view.update = {
      table: "worldmaps"
    };
  }

  rpc GetAllWorldMaps(google.protobuf.Empty) returns (stream domain.WorldMap) {
    option (kalix.method).view.query = {
      query: "SELECT * FROM worldmaps ORDER BY map_id"
    };
  }

}

message ByUserIdRequest {
  string user_id = 1;
}

